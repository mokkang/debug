stages:
    - build
    - scan
    - test
#    - reporting
    


build_job:
    image: maven:latest
    stage: build
    script:
      - mvn package
    artifacts:
      name: verademo.jar
      paths:
        -  verademo/app/target/
      expire_in: 5 week
    cache:
      paths:
        - app/target/
        - .m2/repository/com/veracode/verademo/app/

Software Composition Analysis:
    image: maven:latest
    stage: scan
    script:
        - curl -sSL https://download.sourceclear.com/ci.sh | bash
        
development-upload-for-sast:
    image: openjdk:latest
    stage: scan
    only:
        - development
    before_script:
        - curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
        - unzip pipeline-scan-LATEST.zip
    script:
        - java -jar pipeline-scan.jar -vid ${VERACODE_API_ID} -vkey ${VERACODE_API_KEY} --file target/verademo.jar
    artifacts:
        paths:
            - results.json
    allow_failure: true
    
release-upload-for-sast:
    image: openjdk:latest
    stage: scan
    only:
        - release
    before_script:
        - wget -q -O VeracodeJavaAPI.jar https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/${VERACODE_WRAPPER_VERSION}/vosp-api-wrappers-java-${VERACODE_WRAPPER_VERSION}.jar
    script:
        - java -jar VeracodeJavaAPI.jar -vid ${VERACODE_API_ID} -vkey ${VERACODE_API_KEY}
          -action UploadAndScan -appname "verademo" -createprofile true -autoscan true -sandboxname "verademo_JINMOK"
          -filepath ./target/verademo.jar -version "Job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}"
    allow_failure: true
    
policy-upload-for-sast:
    image: openjdk:latest
    stage: scan
    only:
        - schedules
        - master
    before_script:
            - wget -q -O VeracodeJavaAPI.jar https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/${VERACODE_WRAPPER_VERSION}/vosp-api-wrappers-java-${VERACODE_WRAPPER_VERSION}.jar
    script:
        - java -jar VeracodeJavaAPI.jar -vid ${VERACODE_API_ID} -vkey ${VERACODE_API_KEY}
          -action UploadAndScan -appname "Verademo" -createprofile true -autoscan true
          -filepath ./target/verademo.jar -version "Job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID}"
          -scantimeout 15
test_job:
  stage: test
  tags:
    - docker
  script:
    - mvn test

#  script:
#    - echo "Maven test started"
#    - ./verademo/app/mvn test
          
#variables:
#  MAVEN_OPTS:  -Dmaven.repo.local=.m2/repository

#image: maven:latest

#stages:
#    - build
#    - test
##    - package
 #   - deploy

#cache:
#  paths:
#    - .m2/repository
#    - target

#build_job:
#  stage: build
#  tags:
#    - docker
#  script:
#    - echo "Maven compile started"
#    - ./verademo/app/mvn compile

#test_job:
#  stage: test
#  tags:
#    - docker

#  script:
#    - echo "Maven test started"
#    - ./verademo/app/mvn test

#package_job:
#  stage: package
#  tags:
#    - docker
#  script:
#    - echo "Maven packaging started"
#    - ./verademo/app/mvn package

#Deploy_job:
#  stage: deploy
#  tags:
#    - docker
#  script:
#    - echo "Maven deploy started"
#    - ./verademo/app/mvn install

#Store Baseline:
  # Job will only run on master, if requested.
  # Will restore the above baseline artifact so it can be pulled down in other stages
#  stage: store
  #before_script:
#  only:        
#    - master
#  when: manual
#  script:
##    - echo "Storing results.json as baseline.json"
#  artifacts:
#    name: baseline
#    paths:
#      - baseline.json # If you want to keep this longer than the GitLab default - press store in the web UI

#Baseline Scan:
  # Job will run anywhere, except master. Will pull the baseline file and use it in the scan, if available
#  dependencies:
#    - Scan
#  except:
#    - master
#  stage: scan
#  script:
#    - git clean -dfx
#    - "curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip"
#    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar
#    - '[[ ! -f baseline.json ]] &&  curl --location "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_REF_NAME/raw/baseline.json?job=Store%20Baseline" -o baseline.json'
#    - java -jar pipeline-scan.jar --veracode_api_id "${VERACODE_KEY}" --veracode_api_key "${VERACODE_SECRET}" --file "<file_to_scan>" --project_name "${CI_PROJECT_PATH}" --project_url "${CI_PROJECT_URL}" --project_ref "${CI_COMMIT_REF_NAME}" --baseline_file baseline.json -jf results.json

#variables:
 # MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

#image: maven:latest


#image: maven:latest

#stages:
#  - build
#  - scan
#  - store

#build_job:
#  stage: build
#  artifacts:
#    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build
#    paths:
#      - app/
#    expire_in: 1 week
#  script: "mvn clean install"#

#Scan:
#  stage: scan
#  only:
#    - master
#  dependencies:
#    - build_job
#  artifacts:
#    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results
#    paths:
#      - baseline.json
#    expire_in: 1 week
#    when: always
##  script:
#    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
#    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar
#    - java -jar pipeline-scan.jar
#      --veracode_api_id "${VERACODE_API_ID}"
#      --veracode_api_key "${VERACODE_API_SECRET}"
#      --file "build/verademo.jar"
#      --fail_on_severity="Very High, High"
#      --fail_on_cwe="80"
#      --json_output_file="baseline.json"
#      --timeout "${CI_TIMEOUT}"
#      --project_name "${CI_PROJECT_PATH}"
#      --project_url "${CI_REPOSITORY_URL}"
#      --project_ref "${CI_COMMIT_REF_NAME}"


#variables:
#  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
#
#image: maven:latest

#stages:
#    - build
#    - scan
#    - test
#    - package
#    - deploy
#
#
#
#cache:
# paths:
#     - .m2/repository
#     - target

#build_job:
#  stage: build
#  tags:
#    - docker

#  script:
#    - echo "Maven compile started"
#    - mvn compile
#    - mvn com.srcclr:srcclr-maven-plugin:scan

#scanning_job:
#  stage: scan
#  image: ubuntu:latest
#  #tags: 
#   # - 
#  script:
#    - srcclr scan /opt/veracode/VeracodeJavaAPI.jar -vid $VERACODE_API_KEY_ID -vkey $VERACODE_API_KEY_SECRET --file /app/verademo.jar -action #uploadandscan --allow-dirty

#pipeline-scan_job:
#  stage: scan
#  image: veracode/pipeline-scan:latest
#  tags:
#    - docker
#  script:
#    - java -jar /opt/veracode/pipeline-scan.jar -vid $VERACODE_API_KEY_ID -vkey $VERACODE_API_KEY_SECRET --file /app/verademo.jar

#test_job:
#  stage: test
#  tags:
#    - docker

#  script:
#    - echo "maven test started"
#    - mvn test

#package_job:
#  stage: package
#  tags:
#    - docker
  
#  script:
#    - echo "Maven packaging"
#    - mvn package

#Deploy_job:
#  stage: deploy
#  tags:
#    - docker
#  script:
#    - echo "deploy started"
#    - mvn deploy

