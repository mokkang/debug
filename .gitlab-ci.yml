stages:
    - build
    - security
#    - deploy

# for a simple node.js build, this step is (almost) meaningless
build_app:
    image: maven:3.8.5-openjdk-8
    stage: build
    script: 
        - mvn clean package -f app/pom.xml
    artifacts:
        paths:
            - target/verademo.war

veracode_scan:
    image: veracode/api-wrapper-java:latest
    stage: security
    script:
        # the scan WILL fail, so just fire and forget
        - java -jar /opt/veracode/api-wrapper.jar -vid $VERACODE_API_ID -vkey $VERACODE_API_KEY
            -action UploadAndScan -appname "Verademo" -createprofile false
            -filepath target/verademo.war -version "Commit ${CI_COMMIT_SHA:0:8} - Job $CI_JOB_ID"
    allow_failure: true

veracode_sca_scan:
    image: maven:3.8.5-openjdk-8
    stage: security
    variables:
        # SCA agent activation token
        SRCCLR_API_TOKEN: $SRCCLR_API_TOKEN
        SRCCLR_SCM_TYPE: GITLAB
        # See: https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token
        SRCCLR_SCM_TOKEN: $SCM_GITLAB
        # Sets the url of the project
        SRCCLR_SCM_URL: https://gitlab-ci-token:${SCM_GITLAB}@gitlab.com/${CI_PROJECT_PATH}.git
        # Generate a pull request when libraries contain calls to vulnerable methods
        SRCCLR_PR_ON: Low
        # Do not include potentially build-breaking upgrades in a pull request
        #SRCCLR_NO_BREAKING_UPDATES: true
        # Generate a pull request if there are no open pull requests with the exact same changes
        SRCCLR_IGNORE_CLOSED_PRS: "true"
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        #- ssh-add <(echo "$GIT_SSH_PRIV_KEY")
        - mkdir -p ~/.ssh
        - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - git remote rm origin && git remote add origin git@gitlab.com:$CI_PROJECT_PATH.git
        # Set the main branch to match your repo
        - git checkout -b "main"
        - git checkout -b "master"
        - git status
        - git branch

    script:
        - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan .  --update-advisor --loud --sbom-cdx-output > "${CI_COMMIT} - Job $CI_JOB_ID".cdx.json
